//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\frank\source\repos\EBNF\MiProyectoANTLR\Generated\RedLang.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiProyectoANTLR.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class RedLangParser : Parser {
	public const int
		DECLARE=1, SET=2, CHECK=3, OTHERWISE=4, REPEAT=5, LOOP=6, FUNC=7, GIVE=8, 
		SHOW=9, ASK=10, TRUE=11, FALSE=12, NULL=13, AND=14, OR=15, NOT=16, ARRAY=17, 
		READFILE=18, WRITEFILE=19, COLON=20, EQUAL=21, SEMI=22, QUESTION=23, PLUS=24, 
		MINUS=25, STAR=26, SLASH=27, PERCENT=28, GT=29, LT=30, GTEQ=31, LTEQ=32, 
		EQEQ=33, NOTEQ=34, LPAREN=35, RPAREN=36, LBRACE=37, RBRACE=38, COMMA=39, 
		LBRACK=40, RBRACK=41, BASETYPE=42, IDENT=43, INT_LIT=44, FLOAT_LIT=45, 
		STRING_LIT=46, WS=47, COMMENT=48, LINE_COMMENT=49;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_literal = 2, RULE_arguments = 3, 
		RULE_callExpr = 4, RULE_primary = 5, RULE_unary = 6, RULE_factor = 7, 
		RULE_term = 8, RULE_comparison = 9, RULE_equality = 10, RULE_logicAnd = 11, 
		RULE_logicOr = 12, RULE_expression = 13, RULE_readStmt = 14, RULE_printStmt = 15, 
		RULE_assignment = 16, RULE_forStmt = 17, RULE_whileStmt = 18, RULE_ifStmt = 19, 
		RULE_block = 20, RULE_statement = 21, RULE_returnStmt = 22, RULE_param = 23, 
		RULE_parameters = 24, RULE_functionDecl = 25, RULE_type = 26, RULE_arrayAccess = 27, 
		RULE_arrayAssignment = 28, RULE_readFileStmt = 29, RULE_writeFileStmt = 30;
	public static readonly string[] ruleNames = {
		"program", "declaration", "literal", "arguments", "callExpr", "primary", 
		"unary", "factor", "term", "comparison", "equality", "logicAnd", "logicOr", 
		"expression", "readStmt", "printStmt", "assignment", "forStmt", "whileStmt", 
		"ifStmt", "block", "statement", "returnStmt", "param", "parameters", "functionDecl", 
		"type", "arrayAccess", "arrayAssignment", "readFileStmt", "writeFileStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'declare'", "'set'", "'check'", "'otherwise'", "'repeat'", "'loop'", 
		"'func'", "'give'", "'show'", "'ask'", "'true'", "'false'", "'null'", 
		"'and'", "'or'", "'not'", "'array'", "'readfile'", "'writefile'", "':'", 
		"'='", "';'", "'?'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", 
		"'>='", "'<='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "','", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DECLARE", "SET", "CHECK", "OTHERWISE", "REPEAT", "LOOP", "FUNC", 
		"GIVE", "SHOW", "ASK", "TRUE", "FALSE", "NULL", "AND", "OR", "NOT", "ARRAY", 
		"READFILE", "WRITEFILE", "COLON", "EQUAL", "SEMI", "QUESTION", "PLUS", 
		"MINUS", "STAR", "SLASH", "PERCENT", "GT", "LT", "GTEQ", "LTEQ", "EQEQ", 
		"NOTEQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", "LBRACK", "RBRACK", 
		"BASETYPE", "IDENT", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RedLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RedLangParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RedLangParser.Eof, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECLARE) | (1L << SET) | (1L << CHECK) | (1L << REPEAT) | (1L << LOOP) | (1L << FUNC) | (1L << GIVE) | (1L << SHOW) | (1L << ASK) | (1L << LBRACE))) != 0)) {
				{
				State = 65;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DECLARE:
					{
					State = 62; declaration();
					}
					break;
				case FUNC:
					{
					State = 63; functionDecl();
					}
					break;
				case SET:
				case CHECK:
				case REPEAT:
				case LOOP:
				case GIVE:
				case SHOW:
				case ASK:
				case LBRACE:
					{
					State = 64; statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 70; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(RedLangParser.DECLARE, 0); }
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode COLON() { return GetToken(RedLangParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ITerminalNode EQUAL() { return GetToken(RedLangParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(DECLARE);
			State = 73; Match(IDENT);
			State = 74; Match(COLON);
			State = 75; type();
			State = 78;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQUAL) {
				{
				State = 76; Match(EQUAL);
				State = 77; expression();
				}
			}

			State = 80; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INT_LIT() { return GetToken(RedLangParser.INT_LIT, 0); }
		public ITerminalNode FLOAT_LIT() { return GetToken(RedLangParser.FLOAT_LIT, 0); }
		public ITerminalNode STRING_LIT() { return GetToken(RedLangParser.STRING_LIT, 0); }
		public ITerminalNode TRUE() { return GetToken(RedLangParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(RedLangParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(RedLangParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << INT_LIT) | (1L << FLOAT_LIT) | (1L << STRING_LIT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RedLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RedLangParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; expression();
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 85; Match(COMMA);
				State = 86; expression();
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallExprContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallExprContext callExpr() {
		CallExprContext _localctx = new CallExprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_callExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(IDENT);
			State = 93; Match(LPAREN);
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NOT) | (1L << MINUS) | (1L << LPAREN) | (1L << IDENT) | (1L << INT_LIT) | (1L << FLOAT_LIT) | (1L << STRING_LIT))) != 0)) {
				{
				State = 94; arguments();
				}
			}

			State = 97; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public CallExprContext callExpr() {
			return GetRuleContext<CallExprContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_primary);
		try {
			State = 107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; Match(IDENT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; Match(LPAREN);
				State = 102; expression();
				State = 103; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105; callExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106; arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(RedLangParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(RedLangParser.NOT, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_unary);
		int _la;
		try {
			State = 112;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOT:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				_la = _input.La(1);
				if ( !(_la==NOT || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 110; unary();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case LPAREN:
			case IDENT:
			case INT_LIT:
			case FLOAT_LIT:
			case STRING_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(RedLangParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(RedLangParser.STAR, i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(RedLangParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(RedLangParser.SLASH, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(RedLangParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(RedLangParser.PERCENT, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; unary();
			State = 119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) {
				{
				{
				State = 115;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 116; unary();
				}
				}
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(RedLangParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(RedLangParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(RedLangParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(RedLangParser.MINUS, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; factor();
			State = 127;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 123;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 124; factor();
					}
					} 
				}
				State = 129;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] GT() { return GetTokens(RedLangParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(RedLangParser.GT, i);
		}
		public ITerminalNode[] LT() { return GetTokens(RedLangParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(RedLangParser.LT, i);
		}
		public ITerminalNode[] GTEQ() { return GetTokens(RedLangParser.GTEQ); }
		public ITerminalNode GTEQ(int i) {
			return GetToken(RedLangParser.GTEQ, i);
		}
		public ITerminalNode[] LTEQ() { return GetTokens(RedLangParser.LTEQ); }
		public ITerminalNode LTEQ(int i) {
			return GetToken(RedLangParser.LTEQ, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; term();
			State = 135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) {
				{
				{
				State = 131;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 132; term();
				}
				}
				State = 137;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		public ITerminalNode[] EQEQ() { return GetTokens(RedLangParser.EQEQ); }
		public ITerminalNode EQEQ(int i) {
			return GetToken(RedLangParser.EQEQ, i);
		}
		public ITerminalNode[] NOTEQ() { return GetTokens(RedLangParser.NOTEQ); }
		public ITerminalNode NOTEQ(int i) {
			return GetToken(RedLangParser.NOTEQ, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; comparison();
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EQEQ || _la==NOTEQ) {
				{
				{
				State = 139;
				_la = _input.La(1);
				if ( !(_la==EQEQ || _la==NOTEQ) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 140; comparison();
				}
				}
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndContext : ParserRuleContext {
		public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(RedLangParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(RedLangParser.AND, i);
		}
		public LogicAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndContext logicAnd() {
		LogicAndContext _localctx = new LogicAndContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_logicAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; equality();
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 147; Match(AND);
				State = 148; equality();
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOrContext : ParserRuleContext {
		public LogicAndContext[] logicAnd() {
			return GetRuleContexts<LogicAndContext>();
		}
		public LogicAndContext logicAnd(int i) {
			return GetRuleContext<LogicAndContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(RedLangParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(RedLangParser.OR, i);
		}
		public LogicOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterLogicOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitLogicOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOrContext logicOr() {
		LogicOrContext _localctx = new LogicOrContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_logicOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; logicAnd();
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 155; Match(OR);
				State = 156; logicAnd();
				}
				}
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LogicOrContext logicOr() {
			return GetRuleContext<LogicOrContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; logicOr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStmtContext : ParserRuleContext {
		public ITerminalNode ASK() { return GetToken(RedLangParser.ASK, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ReadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterReadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitReadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadStmtContext readStmt() {
		ReadStmtContext _localctx = new ReadStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_readStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(ASK);
			State = 165; Match(LPAREN);
			State = 166; Match(IDENT);
			State = 167; Match(RPAREN);
			State = 168; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode SHOW() { return GetToken(RedLangParser.SHOW, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_printStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(SHOW);
			State = 171; Match(LPAREN);
			State = 172; expression();
			State = 173; Match(RPAREN);
			State = 174; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(RedLangParser.SET, 0); }
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(RedLangParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(SET);
			State = 177; Match(IDENT);
			State = 178; Match(EQUAL);
			State = 179; expression();
			State = 181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 180; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(RedLangParser.LOOP, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(LOOP);
			State = 184; Match(LPAREN);
			State = 187;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECLARE:
				{
				State = 185; declaration();
				}
				break;
			case SET:
				{
				State = 186; assignment();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case NOT:
			case SEMI:
			case MINUS:
			case LPAREN:
			case IDENT:
			case INT_LIT:
			case FLOAT_LIT:
			case STRING_LIT:
				break;
			default:
				break;
			}
			State = 190;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NOT) | (1L << MINUS) | (1L << LPAREN) | (1L << IDENT) | (1L << INT_LIT) | (1L << FLOAT_LIT) | (1L << STRING_LIT))) != 0)) {
				{
				State = 189; expression();
				}
			}

			State = 192; Match(SEMI);
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SET) {
				{
				State = 193; assignment();
				}
			}

			State = 196; Match(RPAREN);
			State = 197; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(RedLangParser.REPEAT, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(REPEAT);
			State = 200; Match(LPAREN);
			State = 201; expression();
			State = 202; Match(RPAREN);
			State = 203; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(RedLangParser.CHECK, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode OTHERWISE() { return GetToken(RedLangParser.OTHERWISE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(CHECK);
			State = 206; Match(LPAREN);
			State = 207; expression();
			State = 208; Match(RPAREN);
			State = 209; block();
			State = 212;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OTHERWISE) {
				{
				State = 210; Match(OTHERWISE);
				State = 211; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(RedLangParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(RedLangParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(LBRACE);
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET) | (1L << CHECK) | (1L << REPEAT) | (1L << LOOP) | (1L << GIVE) | (1L << SHOW) | (1L << ASK) | (1L << LBRACE))) != 0)) {
				{
				{
				State = 215; statement();
				}
				}
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 221; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public ReadStmtContext readStmt() {
			return GetRuleContext<ReadStmtContext>(0);
		}
		public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_statement);
		try {
			State = 232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224; assignment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225; ifStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226; whileStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227; forStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 228; returnStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 229; printStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 230; readStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 231; arrayAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode GIVE() { return GetToken(RedLangParser.GIVE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(GIVE);
			State = 235; expression();
			State = 236; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode COLON() { return GetToken(RedLangParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(IDENT);
			State = 239; Match(COLON);
			State = 240; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RedLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RedLangParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; param();
			State = 247;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 243; Match(COMMA);
				State = 244; param();
				}
				}
				State = 249;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode FUNC() { return GetToken(RedLangParser.FUNC, 0); }
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(RedLangParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(FUNC);
			State = 251; Match(IDENT);
			State = 252; Match(LPAREN);
			State = 254;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENT) {
				{
				State = 253; parameters();
				}
			}

			State = 256; Match(RPAREN);
			State = 257; Match(COLON);
			State = 258; type();
			State = 259; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode BASETYPE() { return GetToken(RedLangParser.BASETYPE, 0); }
		public ITerminalNode QUESTION() { return GetToken(RedLangParser.QUESTION, 0); }
		public ITerminalNode ARRAY() { return GetToken(RedLangParser.ARRAY, 0); }
		public ITerminalNode LBRACK() { return GetToken(RedLangParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(RedLangParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_type);
		int _la;
		try {
			State = 269;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BASETYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261; Match(BASETYPE);
				State = 263;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==QUESTION) {
					{
					State = 262; Match(QUESTION);
					}
				}

				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; Match(ARRAY);
				State = 266; Match(LBRACK);
				State = 267; Match(BASETYPE);
				State = 268; Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		public ITerminalNode LBRACK() { return GetToken(RedLangParser.LBRACK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(RedLangParser.RBRACK, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(IDENT);
			State = 272; Match(LBRACK);
			State = 273; expression();
			State = 274; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(RedLangParser.SET, 0); }
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(RedLangParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(SET);
			State = 277; arrayAccess();
			State = 278; Match(EQUAL);
			State = 279; expression();
			State = 280; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadFileStmtContext : ParserRuleContext {
		public ITerminalNode READFILE() { return GetToken(RedLangParser.READFILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ITerminalNode STRING_LIT() { return GetToken(RedLangParser.STRING_LIT, 0); }
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ReadFileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readFileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterReadFileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitReadFileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadFileStmtContext readFileStmt() {
		ReadFileStmtContext _localctx = new ReadFileStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_readFileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(READFILE);
			State = 283; Match(LPAREN);
			State = 284; Match(STRING_LIT);
			State = 285; Match(RPAREN);
			State = 286; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteFileStmtContext : ParserRuleContext {
		public ITerminalNode WRITEFILE() { return GetToken(RedLangParser.WRITEFILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		public ITerminalNode STRING_LIT() { return GetToken(RedLangParser.STRING_LIT, 0); }
		public ITerminalNode COMMA() { return GetToken(RedLangParser.COMMA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public WriteFileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeFileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterWriteFileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitWriteFileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteFileStmtContext writeFileStmt() {
		WriteFileStmtContext _localctx = new WriteFileStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_writeFileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(WRITEFILE);
			State = 289; Match(LPAREN);
			State = 290; Match(STRING_LIT);
			State = 291; Match(COMMA);
			State = 292; expression();
			State = 293; Match(RPAREN);
			State = 294; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x33\x12B\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\x3\x2\x3\x2\a\x2\x44\n\x2\f\x2\xE\x2G\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x5\x3Q\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\a\x5Z\n\x5\f\x5\xE\x5]\v\x5\x3\x6\x3\x6\x3\x6\x5\x6\x62\n\x6\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\an\n\a\x3\b\x3\b"+
		"\x3\b\x5\bs\n\b\x3\t\x3\t\x3\t\a\tx\n\t\f\t\xE\t{\v\t\x3\n\x3\n\x3\n\a"+
		"\n\x80\n\n\f\n\xE\n\x83\v\n\x3\v\x3\v\x3\v\a\v\x88\n\v\f\v\xE\v\x8B\v"+
		"\v\x3\f\x3\f\x3\f\a\f\x90\n\f\f\f\xE\f\x93\v\f\x3\r\x3\r\x3\r\a\r\x98"+
		"\n\r\f\r\xE\r\x9B\v\r\x3\xE\x3\xE\x3\xE\a\xE\xA0\n\xE\f\xE\xE\xE\xA3\v"+
		"\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12"+
		"\xB8\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xBE\n\x13\x3\x13\x5\x13"+
		"\xC1\n\x13\x3\x13\x3\x13\x5\x13\xC5\n\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\xD7\n\x15\x3\x16\x3\x16\a\x16\xDB\n\x16\f\x16\xE"+
		"\x16\xDE\v\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x5\x17\xEB\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\xF8\n\x1A\f\x1A\xE"+
		"\x1A\xFB\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x101\n\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C\x10A\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x110\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x2\x2\x2!\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2\x2\b\x4\x2\r\xF.\x30\x4\x2\x12\x12\x1B\x1B\x3\x2"+
		"\x1C\x1E\x3\x2\x1A\x1B\x3\x2\x1F\"\x3\x2#$\x12F\x2\x45\x3\x2\x2\x2\x4"+
		"J\x3\x2\x2\x2\x6T\x3\x2\x2\x2\bV\x3\x2\x2\x2\n^\x3\x2\x2\x2\fm\x3\x2\x2"+
		"\x2\xEr\x3\x2\x2\x2\x10t\x3\x2\x2\x2\x12|\x3\x2\x2\x2\x14\x84\x3\x2\x2"+
		"\x2\x16\x8C\x3\x2\x2\x2\x18\x94\x3\x2\x2\x2\x1A\x9C\x3\x2\x2\x2\x1C\xA4"+
		"\x3\x2\x2\x2\x1E\xA6\x3\x2\x2\x2 \xAC\x3\x2\x2\x2\"\xB2\x3\x2\x2\x2$\xB9"+
		"\x3\x2\x2\x2&\xC9\x3\x2\x2\x2(\xCF\x3\x2\x2\x2*\xD8\x3\x2\x2\x2,\xEA\x3"+
		"\x2\x2\x2.\xEC\x3\x2\x2\x2\x30\xF0\x3\x2\x2\x2\x32\xF4\x3\x2\x2\x2\x34"+
		"\xFC\x3\x2\x2\x2\x36\x10F\x3\x2\x2\x2\x38\x111\x3\x2\x2\x2:\x116\x3\x2"+
		"\x2\x2<\x11C\x3\x2\x2\x2>\x122\x3\x2\x2\x2@\x44\x5\x4\x3\x2\x41\x44\x5"+
		"\x34\x1B\x2\x42\x44\x5,\x17\x2\x43@\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43"+
		"\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2"+
		"\x2\x46H\x3\x2\x2\x2G\x45\x3\x2\x2\x2HI\a\x2\x2\x3I\x3\x3\x2\x2\x2JK\a"+
		"\x3\x2\x2KL\a-\x2\x2LM\a\x16\x2\x2MP\x5\x36\x1C\x2NO\a\x17\x2\x2OQ\x5"+
		"\x1C\xF\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2QR\x3\x2\x2\x2RS\a\x18\x2\x2S\x5"+
		"\x3\x2\x2\x2TU\t\x2\x2\x2U\a\x3\x2\x2\x2V[\x5\x1C\xF\x2WX\a)\x2\x2XZ\x5"+
		"\x1C\xF\x2YW\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\"+
		"\t\x3\x2\x2\x2][\x3\x2\x2\x2^_\a-\x2\x2_\x61\a%\x2\x2`\x62\x5\b\x5\x2"+
		"\x61`\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\a&\x2"+
		"\x2\x64\v\x3\x2\x2\x2\x65n\x5\x6\x4\x2\x66n\a-\x2\x2gh\a%\x2\x2hi\x5\x1C"+
		"\xF\x2ij\a&\x2\x2jn\x3\x2\x2\x2kn\x5\n\x6\x2ln\x5\x38\x1D\x2m\x65\x3\x2"+
		"\x2\x2m\x66\x3\x2\x2\x2mg\x3\x2\x2\x2mk\x3\x2\x2\x2ml\x3\x2\x2\x2n\r\x3"+
		"\x2\x2\x2op\t\x3\x2\x2ps\x5\xE\b\x2qs\x5\f\a\x2ro\x3\x2\x2\x2rq\x3\x2"+
		"\x2\x2s\xF\x3\x2\x2\x2ty\x5\xE\b\x2uv\t\x4\x2\x2vx\x5\xE\b\x2wu\x3\x2"+
		"\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\x11\x3\x2\x2\x2{y\x3"+
		"\x2\x2\x2|\x81\x5\x10\t\x2}~\t\x5\x2\x2~\x80\x5\x10\t\x2\x7F}\x3\x2\x2"+
		"\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x13"+
		"\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x89\x5\x12\n\x2\x85\x86\t\x6\x2\x2"+
		"\x86\x88\x5\x12\n\x2\x87\x85\x3\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3"+
		"\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x15\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2"+
		"\x8C\x91\x5\x14\v\x2\x8D\x8E\t\a\x2\x2\x8E\x90\x5\x14\v\x2\x8F\x8D\x3"+
		"\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2"+
		"\x92\x17\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x99\x5\x16\f\x2\x95\x96\a"+
		"\x10\x2\x2\x96\x98\x5\x16\f\x2\x97\x95\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2"+
		"\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x19\x3\x2\x2\x2\x9B\x99\x3"+
		"\x2\x2\x2\x9C\xA1\x5\x18\r\x2\x9D\x9E\a\x11\x2\x2\x9E\xA0\x5\x18\r\x2"+
		"\x9F\x9D\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3"+
		"\x2\x2\x2\xA2\x1B\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4\xA5\x5\x1A\xE\x2"+
		"\xA5\x1D\x3\x2\x2\x2\xA6\xA7\a\f\x2\x2\xA7\xA8\a%\x2\x2\xA8\xA9\a-\x2"+
		"\x2\xA9\xAA\a&\x2\x2\xAA\xAB\a\x18\x2\x2\xAB\x1F\x3\x2\x2\x2\xAC\xAD\a"+
		"\v\x2\x2\xAD\xAE\a%\x2\x2\xAE\xAF\x5\x1C\xF\x2\xAF\xB0\a&\x2\x2\xB0\xB1"+
		"\a\x18\x2\x2\xB1!\x3\x2\x2\x2\xB2\xB3\a\x4\x2\x2\xB3\xB4\a-\x2\x2\xB4"+
		"\xB5\a\x17\x2\x2\xB5\xB7\x5\x1C\xF\x2\xB6\xB8\a\x18\x2\x2\xB7\xB6\x3\x2"+
		"\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8#\x3\x2\x2\x2\xB9\xBA\a\b\x2\x2\xBA\xBD"+
		"\a%\x2\x2\xBB\xBE\x5\x4\x3\x2\xBC\xBE\x5\"\x12\x2\xBD\xBB\x3\x2\x2\x2"+
		"\xBD\xBC\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF\xC1\x5"+
		"\x1C\xF\x2\xC0\xBF\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2"+
		"\xC2\xC4\a\x18\x2\x2\xC3\xC5\x5\"\x12\x2\xC4\xC3\x3\x2\x2\x2\xC4\xC5\x3"+
		"\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\a&\x2\x2\xC7\xC8\x5*\x16\x2\xC8"+
		"%\x3\x2\x2\x2\xC9\xCA\a\a\x2\x2\xCA\xCB\a%\x2\x2\xCB\xCC\x5\x1C\xF\x2"+
		"\xCC\xCD\a&\x2\x2\xCD\xCE\x5*\x16\x2\xCE\'\x3\x2\x2\x2\xCF\xD0\a\x5\x2"+
		"\x2\xD0\xD1\a%\x2\x2\xD1\xD2\x5\x1C\xF\x2\xD2\xD3\a&\x2\x2\xD3\xD6\x5"+
		"*\x16\x2\xD4\xD5\a\x6\x2\x2\xD5\xD7\x5*\x16\x2\xD6\xD4\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7)\x3\x2\x2\x2\xD8\xDC\a\'\x2\x2\xD9\xDB\x5,\x17\x2"+
		"\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3"+
		"\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE0\a(\x2\x2\xE0"+
		"+\x3\x2\x2\x2\xE1\xEB\x5*\x16\x2\xE2\xEB\x5\"\x12\x2\xE3\xEB\x5(\x15\x2"+
		"\xE4\xEB\x5&\x14\x2\xE5\xEB\x5$\x13\x2\xE6\xEB\x5.\x18\x2\xE7\xEB\x5 "+
		"\x11\x2\xE8\xEB\x5\x1E\x10\x2\xE9\xEB\x5:\x1E\x2\xEA\xE1\x3\x2\x2\x2\xEA"+
		"\xE2\x3\x2\x2\x2\xEA\xE3\x3\x2\x2\x2\xEA\xE4\x3\x2\x2\x2\xEA\xE5\x3\x2"+
		"\x2\x2\xEA\xE6\x3\x2\x2\x2\xEA\xE7\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA"+
		"\xE9\x3\x2\x2\x2\xEB-\x3\x2\x2\x2\xEC\xED\a\n\x2\x2\xED\xEE\x5\x1C\xF"+
		"\x2\xEE\xEF\a\x18\x2\x2\xEF/\x3\x2\x2\x2\xF0\xF1\a-\x2\x2\xF1\xF2\a\x16"+
		"\x2\x2\xF2\xF3\x5\x36\x1C\x2\xF3\x31\x3\x2\x2\x2\xF4\xF9\x5\x30\x19\x2"+
		"\xF5\xF6\a)\x2\x2\xF6\xF8\x5\x30\x19\x2\xF7\xF5\x3\x2\x2\x2\xF8\xFB\x3"+
		"\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\x33\x3\x2\x2\x2"+
		"\xFB\xF9\x3\x2\x2\x2\xFC\xFD\a\t\x2\x2\xFD\xFE\a-\x2\x2\xFE\x100\a%\x2"+
		"\x2\xFF\x101\x5\x32\x1A\x2\x100\xFF\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2"+
		"\x101\x102\x3\x2\x2\x2\x102\x103\a&\x2\x2\x103\x104\a\x16\x2\x2\x104\x105"+
		"\x5\x36\x1C\x2\x105\x106\x5*\x16\x2\x106\x35\x3\x2\x2\x2\x107\x109\a,"+
		"\x2\x2\x108\x10A\a\x19\x2\x2\x109\x108\x3\x2\x2\x2\x109\x10A\x3\x2\x2"+
		"\x2\x10A\x110\x3\x2\x2\x2\x10B\x10C\a\x13\x2\x2\x10C\x10D\a*\x2\x2\x10D"+
		"\x10E\a,\x2\x2\x10E\x110\a+\x2\x2\x10F\x107\x3\x2\x2\x2\x10F\x10B\x3\x2"+
		"\x2\x2\x110\x37\x3\x2\x2\x2\x111\x112\a-\x2\x2\x112\x113\a*\x2\x2\x113"+
		"\x114\x5\x1C\xF\x2\x114\x115\a+\x2\x2\x115\x39\x3\x2\x2\x2\x116\x117\a"+
		"\x4\x2\x2\x117\x118\x5\x38\x1D\x2\x118\x119\a\x17\x2\x2\x119\x11A\x5\x1C"+
		"\xF\x2\x11A\x11B\a\x18\x2\x2\x11B;\x3\x2\x2\x2\x11C\x11D\a\x14\x2\x2\x11D"+
		"\x11E\a%\x2\x2\x11E\x11F\a\x30\x2\x2\x11F\x120\a&\x2\x2\x120\x121\a\x18"+
		"\x2\x2\x121=\x3\x2\x2\x2\x122\x123\a\x15\x2\x2\x123\x124\a%\x2\x2\x124"+
		"\x125\a\x30\x2\x2\x125\x126\a)\x2\x2\x126\x127\x5\x1C\xF\x2\x127\x128"+
		"\a&\x2\x2\x128\x129\a\x18\x2\x2\x129?\x3\x2\x2\x2\x1A\x43\x45P[\x61mr"+
		"y\x81\x89\x91\x99\xA1\xB7\xBD\xC0\xC4\xD6\xDC\xEA\xF9\x100\x109\x10F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiProyectoANTLR.Generated
