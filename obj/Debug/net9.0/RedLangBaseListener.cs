//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\frank\source\repos\EBNF\MiProyectoANTLR\Generated\RedLang.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiProyectoANTLR.Generated {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRedLangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class RedLangBaseListener : IRedLangListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] RedLangParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] RedLangParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaration([NotNull] RedLangParser.DeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaration([NotNull] RedLangParser.DeclarationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] RedLangParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] RedLangParser.LiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] RedLangParser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] RedLangParser.ArgumentsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.callExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallExpr([NotNull] RedLangParser.CallExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.callExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallExpr([NotNull] RedLangParser.CallExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimary([NotNull] RedLangParser.PrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimary([NotNull] RedLangParser.PrimaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.unary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnary([NotNull] RedLangParser.UnaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.unary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnary([NotNull] RedLangParser.UnaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] RedLangParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] RedLangParser.FactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] RedLangParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] RedLangParser.TermContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.comparison"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparison([NotNull] RedLangParser.ComparisonContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.comparison"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparison([NotNull] RedLangParser.ComparisonContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.equality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquality([NotNull] RedLangParser.EqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.equality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquality([NotNull] RedLangParser.EqualityContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.logicAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicAnd([NotNull] RedLangParser.LogicAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.logicAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicAnd([NotNull] RedLangParser.LogicAndContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.logicOr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicOr([NotNull] RedLangParser.LogicOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.logicOr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicOr([NotNull] RedLangParser.LogicOrContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] RedLangParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] RedLangParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.readStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadStmt([NotNull] RedLangParser.ReadStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.readStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadStmt([NotNull] RedLangParser.ReadStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.printStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintStmt([NotNull] RedLangParser.PrintStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.printStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintStmt([NotNull] RedLangParser.PrintStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] RedLangParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] RedLangParser.AssignmentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.forStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStmt([NotNull] RedLangParser.ForStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.forStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStmt([NotNull] RedLangParser.ForStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.whileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStmt([NotNull] RedLangParser.WhileStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.whileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStmt([NotNull] RedLangParser.WhileStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] RedLangParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] RedLangParser.IfStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] RedLangParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] RedLangParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] RedLangParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] RedLangParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.returnStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStmt([NotNull] RedLangParser.ReturnStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.returnStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStmt([NotNull] RedLangParser.ReturnStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParam([NotNull] RedLangParser.ParamContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParam([NotNull] RedLangParser.ParamContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameters([NotNull] RedLangParser.ParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameters([NotNull] RedLangParser.ParametersContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.functionDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDecl([NotNull] RedLangParser.FunctionDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.functionDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDecl([NotNull] RedLangParser.FunctionDeclContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] RedLangParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] RedLangParser.TypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.arrayAccess"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayAccess([NotNull] RedLangParser.ArrayAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.arrayAccess"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayAccess([NotNull] RedLangParser.ArrayAccessContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.arrayAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayAssignment([NotNull] RedLangParser.ArrayAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.arrayAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayAssignment([NotNull] RedLangParser.ArrayAssignmentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.readFileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadFileStmt([NotNull] RedLangParser.ReadFileStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.readFileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadFileStmt([NotNull] RedLangParser.ReadFileStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.writeFileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteFileStmt([NotNull] RedLangParser.WriteFileStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.writeFileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteFileStmt([NotNull] RedLangParser.WriteFileStmtContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace MiProyectoANTLR.Generated
