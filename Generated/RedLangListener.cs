//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RedLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RedLangParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IRedLangListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] RedLangParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] RedLangParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] RedLangParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] RedLangParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] RedLangParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] RedLangParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] RedLangParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] RedLangParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.callExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallExpr([NotNull] RedLangParser.CallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.callExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallExpr([NotNull] RedLangParser.CallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccess([NotNull] RedLangParser.ArrayAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccess([NotNull] RedLangParser.ArrayAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary([NotNull] RedLangParser.PrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary([NotNull] RedLangParser.PrimaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary([NotNull] RedLangParser.UnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary([NotNull] RedLangParser.UnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] RedLangParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] RedLangParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] RedLangParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] RedLangParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.comparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison([NotNull] RedLangParser.ComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.comparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison([NotNull] RedLangParser.ComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.equality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality([NotNull] RedLangParser.EqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.equality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality([NotNull] RedLangParser.EqualityContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.logicAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicAnd([NotNull] RedLangParser.LogicAndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.logicAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicAnd([NotNull] RedLangParser.LogicAndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.logicOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicOr([NotNull] RedLangParser.LogicOrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.logicOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicOr([NotNull] RedLangParser.LogicOrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] RedLangParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] RedLangParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.readStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStmt([NotNull] RedLangParser.ReadStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.readStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStmt([NotNull] RedLangParser.ReadStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.printStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStmt([NotNull] RedLangParser.PrintStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.printStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStmt([NotNull] RedLangParser.PrintStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] RedLangParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] RedLangParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.forStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] RedLangParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.forStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] RedLangParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] RedLangParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] RedLangParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] RedLangParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] RedLangParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] RedLangParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] RedLangParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] RedLangParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] RedLangParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] RedLangParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] RedLangParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] RedLangParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] RedLangParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] RedLangParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] RedLangParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDecl([NotNull] RedLangParser.FunctionDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDecl([NotNull] RedLangParser.FunctionDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] RedLangParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] RedLangParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.arrayAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAssignment([NotNull] RedLangParser.ArrayAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.arrayAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAssignment([NotNull] RedLangParser.ArrayAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.readFileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadFileStmt([NotNull] RedLangParser.ReadFileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.readFileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadFileStmt([NotNull] RedLangParser.ReadFileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RedLangParser.writeFileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteFileStmt([NotNull] RedLangParser.WriteFileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RedLangParser.writeFileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteFileStmt([NotNull] RedLangParser.WriteFileStmtContext context);
}
