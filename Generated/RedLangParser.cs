//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RedLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RedLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DECLARE=1, SET=2, CHECK=3, OTHERWISE=4, REPEAT=5, LOOP=6, FUNC=7, GIVE=8, 
		SHOW=9, ASK=10, TRUE=11, FALSE=12, NULL=13, AND=14, OR=15, NOT=16, ARRAY=17, 
		READFILE=18, WRITEFILE=19, COLON=20, EQUAL=21, SEMI=22, QUESTION=23, PLUS=24, 
		MINUS=25, STAR=26, SLASH=27, PERCENT=28, GT=29, LT=30, GTEQ=31, LTEQ=32, 
		EQEQ=33, NOTEQ=34, LPAREN=35, RPAREN=36, LBRACE=37, RBRACE=38, COMMA=39, 
		LBRACK=40, RBRACK=41, BASETYPE=42, IDENT=43, INT_LIT=44, FLOAT_LIT=45, 
		STRING_LIT=46, WS=47, COMMENT=48, LINE_COMMENT=49;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_literal = 2, RULE_arguments = 3, 
		RULE_callExpr = 4, RULE_arrayAccess = 5, RULE_primary = 6, RULE_unary = 7, 
		RULE_factor = 8, RULE_term = 9, RULE_comparison = 10, RULE_equality = 11, 
		RULE_logicAnd = 12, RULE_logicOr = 13, RULE_expression = 14, RULE_readStmt = 15, 
		RULE_printStmt = 16, RULE_assignment = 17, RULE_forStmt = 18, RULE_whileStmt = 19, 
		RULE_ifStmt = 20, RULE_block = 21, RULE_statement = 22, RULE_returnStmt = 23, 
		RULE_param = 24, RULE_parameters = 25, RULE_functionDecl = 26, RULE_type = 27, 
		RULE_arrayAssignment = 28, RULE_readFileStmt = 29, RULE_writeFileStmt = 30;
	public static readonly string[] ruleNames = {
		"program", "declaration", "literal", "arguments", "callExpr", "arrayAccess", 
		"primary", "unary", "factor", "term", "comparison", "equality", "logicAnd", 
		"logicOr", "expression", "readStmt", "printStmt", "assignment", "forStmt", 
		"whileStmt", "ifStmt", "block", "statement", "returnStmt", "param", "parameters", 
		"functionDecl", "type", "arrayAssignment", "readFileStmt", "writeFileStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'declare'", "'set'", "'check'", "'otherwise'", "'repeat'", "'loop'", 
		"'func'", "'give'", "'show'", "'ask'", "'true'", "'false'", "'null'", 
		"'and'", "'or'", "'not'", "'array'", "'readfile'", "'writefile'", "':'", 
		"'='", "';'", "'?'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", 
		"'>='", "'<='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "','", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DECLARE", "SET", "CHECK", "OTHERWISE", "REPEAT", "LOOP", "FUNC", 
		"GIVE", "SHOW", "ASK", "TRUE", "FALSE", "NULL", "AND", "OR", "NOT", "ARRAY", 
		"READFILE", "WRITEFILE", "COLON", "EQUAL", "SEMI", "QUESTION", "PLUS", 
		"MINUS", "STAR", "SLASH", "PERCENT", "GT", "LT", "GTEQ", "LTEQ", "EQEQ", 
		"NOTEQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", "LBRACK", "RBRACK", 
		"BASETYPE", "IDENT", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RedLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RedLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RedLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RedLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RedLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8933531977710L) != 0)) {
				{
				State = 65;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECLARE:
					{
					State = 62;
					declaration();
					}
					break;
				case FUNC:
					{
					State = 63;
					functionDecl();
					}
					break;
				case SET:
				case CHECK:
				case REPEAT:
				case LOOP:
				case GIVE:
				case SHOW:
				case ASK:
				case LBRACE:
				case IDENT:
					{
					State = 64;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(RedLangParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RedLangParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(RedLangParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(DECLARE);
			State = 73;
			Match(IDENT);
			State = 74;
			Match(COLON);
			State = 75;
			type();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 76;
				Match(EQUAL);
				State = 77;
				expression();
				}
			}

			State = 80;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LIT() { return GetToken(RedLangParser.INT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(RedLangParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(RedLangParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RedLangParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RedLangParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(RedLangParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302325248L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RedLangParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RedLangParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 6, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			expression();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 85;
				Match(COMMA);
				State = 86;
				expression();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallExprContext callExpr() {
		CallExprContext _localctx = new CallExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_callExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(IDENT);
			State = 93;
			Match(LPAREN);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131975788705792L) != 0)) {
				{
				State = 94;
				arguments();
				}
			}

			State = 97;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(RedLangParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(RedLangParser.RBRACK, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 10, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(IDENT);
			State = 100;
			Match(LBRACK);
			State = 101;
			expression();
			State = 102;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallExprContext callExpr() {
			return GetRuleContext<CallExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_primary);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				callExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				arrayAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107;
				Match(IDENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				Match(LPAREN);
				State = 109;
				expression();
				State = 110;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RedLangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RedLangParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_unary);
		int _la;
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 115;
				unary();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case LPAREN:
			case IDENT:
			case INT_LIT:
			case FLOAT_LIT:
			case STRING_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(RedLangParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(RedLangParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(RedLangParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(RedLangParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(RedLangParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(RedLangParser.PERCENT, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 16, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			unary();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) {
				{
				{
				State = 120;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 121;
				unary();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RedLangParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RedLangParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(RedLangParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(RedLangParser.MINUS, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 18, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			factor();
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 128;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 129;
					factor();
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(RedLangParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(RedLangParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(RedLangParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(RedLangParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTEQ() { return GetTokens(RedLangParser.GTEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ(int i) {
			return GetToken(RedLangParser.GTEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTEQ() { return GetTokens(RedLangParser.LTEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ(int i) {
			return GetToken(RedLangParser.LTEQ, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			term();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) {
				{
				{
				State = 136;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 137;
				term();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQ() { return GetTokens(RedLangParser.EQEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ(int i) {
			return GetToken(RedLangParser.EQEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOTEQ() { return GetTokens(RedLangParser.NOTEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ(int i) {
			return GetToken(RedLangParser.NOTEQ, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 22, RULE_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			comparison();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQEQ || _la==NOTEQ) {
				{
				{
				State = 144;
				_la = TokenStream.LA(1);
				if ( !(_la==EQEQ || _la==NOTEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 145;
				comparison();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(RedLangParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(RedLangParser.AND, i);
		}
		public LogicAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndContext logicAnd() {
		LogicAndContext _localctx = new LogicAndContext(Context, State);
		EnterRule(_localctx, 24, RULE_logicAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			equality();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 152;
				Match(AND);
				State = 153;
				equality();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndContext[] logicAnd() {
			return GetRuleContexts<LogicAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndContext logicAnd(int i) {
			return GetRuleContext<LogicAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(RedLangParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(RedLangParser.OR, i);
		}
		public LogicOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterLogicOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitLogicOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOrContext logicOr() {
		LogicOrContext _localctx = new LogicOrContext(Context, State);
		EnterRule(_localctx, 26, RULE_logicOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			logicAnd();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 160;
				Match(OR);
				State = 161;
				logicAnd();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicOrContext logicOr() {
			return GetRuleContext<LogicOrContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			logicOr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASK() { return GetToken(RedLangParser.ASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ReadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterReadStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitReadStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadStmtContext readStmt() {
		ReadStmtContext _localctx = new ReadStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_readStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(ASK);
			State = 170;
			Match(LPAREN);
			State = 171;
			Match(IDENT);
			State = 172;
			Match(RPAREN);
			State = 173;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RedLangParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_printStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(SHOW);
			State = 176;
			Match(LPAREN);
			State = 177;
			expression();
			State = 178;
			Match(RPAREN);
			State = 179;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(RedLangParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(RedLangParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(SET);
			State = 182;
			Match(IDENT);
			State = 183;
			Match(EQUAL);
			State = 184;
			expression();
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 185;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(RedLangParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(LOOP);
			State = 189;
			Match(LPAREN);
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECLARE:
				{
				State = 190;
				declaration();
				}
				break;
			case SET:
				{
				State = 191;
				assignment();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case NOT:
			case SEMI:
			case MINUS:
			case LPAREN:
			case IDENT:
			case INT_LIT:
			case FLOAT_LIT:
			case STRING_LIT:
				break;
			default:
				break;
			}
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131975788705792L) != 0)) {
				{
				State = 194;
				expression();
				}
			}

			State = 197;
			Match(SEMI);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 198;
				assignment();
				}
			}

			State = 201;
			Match(RPAREN);
			State = 202;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(RedLangParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(REPEAT);
			State = 205;
			Match(LPAREN);
			State = 206;
			expression();
			State = 207;
			Match(RPAREN);
			State = 208;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(RedLangParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(RedLangParser.OTHERWISE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(CHECK);
			State = 211;
			Match(LPAREN);
			State = 212;
			expression();
			State = 213;
			Match(RPAREN);
			State = 214;
			block();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OTHERWISE) {
				{
				State = 215;
				Match(OTHERWISE);
				State = 216;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RedLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RedLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(LBRACE);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8933531977580L) != 0)) {
				{
				{
				State = 220;
				statement();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 226;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStmtContext readStmt() {
			return GetRuleContext<ReadStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallExprContext callExpr() {
			return GetRuleContext<CallExprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_statement);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230;
				ifStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 231;
				whileStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 232;
				forStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 233;
				returnStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 234;
				printStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 235;
				readStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 236;
				arrayAssignment();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 237;
				callExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVE() { return GetToken(RedLangParser.GIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(GIVE);
			State = 241;
			expression();
			State = 242;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RedLangParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 48, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(IDENT);
			State = 245;
			Match(COLON);
			State = 246;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RedLangParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RedLangParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			param();
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 249;
				Match(COMMA);
				State = 250;
				param();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(RedLangParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedLangParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RedLangParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(FUNC);
			State = 257;
			Match(IDENT);
			State = 258;
			Match(LPAREN);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 259;
				parameters();
				}
			}

			State = 262;
			Match(RPAREN);
			State = 263;
			Match(COLON);
			State = 264;
			type();
			State = 265;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASETYPE() { return GetToken(RedLangParser.BASETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(RedLangParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(RedLangParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(RedLangParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(RedLangParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_type);
		int _la;
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASETYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				Match(BASETYPE);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 268;
					Match(QUESTION);
					}
				}

				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(ARRAY);
				State = 272;
				Match(LBRACK);
				State = 273;
				Match(BASETYPE);
				State = 274;
				Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(RedLangParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(RedLangParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(SET);
			State = 278;
			arrayAccess();
			State = 279;
			Match(EQUAL);
			State = 280;
			expression();
			State = 281;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadFileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READFILE() { return GetToken(RedLangParser.READFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(RedLangParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public ReadFileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readFileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterReadFileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitReadFileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadFileStmtContext readFileStmt() {
		ReadFileStmtContext _localctx = new ReadFileStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_readFileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(READFILE);
			State = 284;
			Match(LPAREN);
			State = 285;
			Match(STRING_LIT);
			State = 286;
			Match(RPAREN);
			State = 287;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteFileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITEFILE() { return GetToken(RedLangParser.WRITEFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RedLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(RedLangParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RedLangParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RedLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RedLangParser.SEMI, 0); }
		public WriteFileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeFileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.EnterWriteFileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedLangListener typedListener = listener as IRedLangListener;
			if (typedListener != null) typedListener.ExitWriteFileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedLangVisitor<TResult> typedVisitor = visitor as IRedLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteFileStmtContext writeFileStmt() {
		WriteFileStmtContext _localctx = new WriteFileStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_writeFileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(WRITEFILE);
			State = 290;
			Match(LPAREN);
			State = 291;
			Match(STRING_LIT);
			State = 292;
			Match(COMMA);
			State = 293;
			expression();
			State = 294;
			Match(RPAREN);
			State = 295;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,49,298,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,3,1,79,8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,5,3,88,8,
		3,10,3,12,3,91,9,3,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,113,8,6,1,7,1,7,1,7,3,7,118,8,7,1,
		8,1,8,1,8,5,8,123,8,8,10,8,12,8,126,9,8,1,9,1,9,1,9,5,9,131,8,9,10,9,12,
		9,134,9,9,1,10,1,10,1,10,5,10,139,8,10,10,10,12,10,142,9,10,1,11,1,11,
		1,11,5,11,147,8,11,10,11,12,11,150,9,11,1,12,1,12,1,12,5,12,155,8,12,10,
		12,12,12,158,9,12,1,13,1,13,1,13,5,13,163,8,13,10,13,12,13,166,9,13,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,3,17,187,8,17,1,18,1,18,1,18,1,18,3,18,193,8,18,
		1,18,3,18,196,8,18,1,18,1,18,3,18,200,8,18,1,18,1,18,1,18,1,19,1,19,1,
		19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,218,8,20,1,21,
		1,21,5,21,222,8,21,10,21,12,21,225,9,21,1,21,1,21,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,239,8,22,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,25,1,25,1,25,5,25,252,8,25,10,25,12,25,255,9,25,1,26,1,
		26,1,26,1,26,3,26,261,8,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,3,27,270,
		8,27,1,27,1,27,1,27,1,27,3,27,276,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
		29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,0,0,31,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,0,6,2,0,11,13,44,46,2,0,16,16,25,25,1,0,26,
		28,1,0,24,25,1,0,29,32,1,0,33,34,303,0,67,1,0,0,0,2,72,1,0,0,0,4,82,1,
		0,0,0,6,84,1,0,0,0,8,92,1,0,0,0,10,99,1,0,0,0,12,112,1,0,0,0,14,117,1,
		0,0,0,16,119,1,0,0,0,18,127,1,0,0,0,20,135,1,0,0,0,22,143,1,0,0,0,24,151,
		1,0,0,0,26,159,1,0,0,0,28,167,1,0,0,0,30,169,1,0,0,0,32,175,1,0,0,0,34,
		181,1,0,0,0,36,188,1,0,0,0,38,204,1,0,0,0,40,210,1,0,0,0,42,219,1,0,0,
		0,44,238,1,0,0,0,46,240,1,0,0,0,48,244,1,0,0,0,50,248,1,0,0,0,52,256,1,
		0,0,0,54,275,1,0,0,0,56,277,1,0,0,0,58,283,1,0,0,0,60,289,1,0,0,0,62,66,
		3,2,1,0,63,66,3,52,26,0,64,66,3,44,22,0,65,62,1,0,0,0,65,63,1,0,0,0,65,
		64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,
		67,1,0,0,0,70,71,5,0,0,1,71,1,1,0,0,0,72,73,5,1,0,0,73,74,5,43,0,0,74,
		75,5,20,0,0,75,78,3,54,27,0,76,77,5,21,0,0,77,79,3,28,14,0,78,76,1,0,0,
		0,78,79,1,0,0,0,79,80,1,0,0,0,80,81,5,22,0,0,81,3,1,0,0,0,82,83,7,0,0,
		0,83,5,1,0,0,0,84,89,3,28,14,0,85,86,5,39,0,0,86,88,3,28,14,0,87,85,1,
		0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,7,1,0,0,0,91,89,1,0,
		0,0,92,93,5,43,0,0,93,95,5,35,0,0,94,96,3,6,3,0,95,94,1,0,0,0,95,96,1,
		0,0,0,96,97,1,0,0,0,97,98,5,36,0,0,98,9,1,0,0,0,99,100,5,43,0,0,100,101,
		5,40,0,0,101,102,3,28,14,0,102,103,5,41,0,0,103,11,1,0,0,0,104,113,3,4,
		2,0,105,113,3,8,4,0,106,113,3,10,5,0,107,113,5,43,0,0,108,109,5,35,0,0,
		109,110,3,28,14,0,110,111,5,36,0,0,111,113,1,0,0,0,112,104,1,0,0,0,112,
		105,1,0,0,0,112,106,1,0,0,0,112,107,1,0,0,0,112,108,1,0,0,0,113,13,1,0,
		0,0,114,115,7,1,0,0,115,118,3,14,7,0,116,118,3,12,6,0,117,114,1,0,0,0,
		117,116,1,0,0,0,118,15,1,0,0,0,119,124,3,14,7,0,120,121,7,2,0,0,121,123,
		3,14,7,0,122,120,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,
		0,125,17,1,0,0,0,126,124,1,0,0,0,127,132,3,16,8,0,128,129,7,3,0,0,129,
		131,3,16,8,0,130,128,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,
		0,0,0,133,19,1,0,0,0,134,132,1,0,0,0,135,140,3,18,9,0,136,137,7,4,0,0,
		137,139,3,18,9,0,138,136,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,
		1,0,0,0,141,21,1,0,0,0,142,140,1,0,0,0,143,148,3,20,10,0,144,145,7,5,0,
		0,145,147,3,20,10,0,146,144,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,
		149,1,0,0,0,149,23,1,0,0,0,150,148,1,0,0,0,151,156,3,22,11,0,152,153,5,
		14,0,0,153,155,3,22,11,0,154,152,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,
		0,156,157,1,0,0,0,157,25,1,0,0,0,158,156,1,0,0,0,159,164,3,24,12,0,160,
		161,5,15,0,0,161,163,3,24,12,0,162,160,1,0,0,0,163,166,1,0,0,0,164,162,
		1,0,0,0,164,165,1,0,0,0,165,27,1,0,0,0,166,164,1,0,0,0,167,168,3,26,13,
		0,168,29,1,0,0,0,169,170,5,10,0,0,170,171,5,35,0,0,171,172,5,43,0,0,172,
		173,5,36,0,0,173,174,5,22,0,0,174,31,1,0,0,0,175,176,5,9,0,0,176,177,5,
		35,0,0,177,178,3,28,14,0,178,179,5,36,0,0,179,180,5,22,0,0,180,33,1,0,
		0,0,181,182,5,2,0,0,182,183,5,43,0,0,183,184,5,21,0,0,184,186,3,28,14,
		0,185,187,5,22,0,0,186,185,1,0,0,0,186,187,1,0,0,0,187,35,1,0,0,0,188,
		189,5,6,0,0,189,192,5,35,0,0,190,193,3,2,1,0,191,193,3,34,17,0,192,190,
		1,0,0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,196,3,28,14,
		0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,199,5,22,0,0,198,
		200,3,34,17,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,
		5,36,0,0,202,203,3,42,21,0,203,37,1,0,0,0,204,205,5,5,0,0,205,206,5,35,
		0,0,206,207,3,28,14,0,207,208,5,36,0,0,208,209,3,42,21,0,209,39,1,0,0,
		0,210,211,5,3,0,0,211,212,5,35,0,0,212,213,3,28,14,0,213,214,5,36,0,0,
		214,217,3,42,21,0,215,216,5,4,0,0,216,218,3,42,21,0,217,215,1,0,0,0,217,
		218,1,0,0,0,218,41,1,0,0,0,219,223,5,37,0,0,220,222,3,44,22,0,221,220,
		1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,
		0,225,223,1,0,0,0,226,227,5,38,0,0,227,43,1,0,0,0,228,239,3,42,21,0,229,
		239,3,34,17,0,230,239,3,40,20,0,231,239,3,38,19,0,232,239,3,36,18,0,233,
		239,3,46,23,0,234,239,3,32,16,0,235,239,3,30,15,0,236,239,3,56,28,0,237,
		239,3,8,4,0,238,228,1,0,0,0,238,229,1,0,0,0,238,230,1,0,0,0,238,231,1,
		0,0,0,238,232,1,0,0,0,238,233,1,0,0,0,238,234,1,0,0,0,238,235,1,0,0,0,
		238,236,1,0,0,0,238,237,1,0,0,0,239,45,1,0,0,0,240,241,5,8,0,0,241,242,
		3,28,14,0,242,243,5,22,0,0,243,47,1,0,0,0,244,245,5,43,0,0,245,246,5,20,
		0,0,246,247,3,54,27,0,247,49,1,0,0,0,248,253,3,48,24,0,249,250,5,39,0,
		0,250,252,3,48,24,0,251,249,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,
		254,1,0,0,0,254,51,1,0,0,0,255,253,1,0,0,0,256,257,5,7,0,0,257,258,5,43,
		0,0,258,260,5,35,0,0,259,261,3,50,25,0,260,259,1,0,0,0,260,261,1,0,0,0,
		261,262,1,0,0,0,262,263,5,36,0,0,263,264,5,20,0,0,264,265,3,54,27,0,265,
		266,3,42,21,0,266,53,1,0,0,0,267,269,5,42,0,0,268,270,5,23,0,0,269,268,
		1,0,0,0,269,270,1,0,0,0,270,276,1,0,0,0,271,272,5,17,0,0,272,273,5,40,
		0,0,273,274,5,42,0,0,274,276,5,41,0,0,275,267,1,0,0,0,275,271,1,0,0,0,
		276,55,1,0,0,0,277,278,5,2,0,0,278,279,3,10,5,0,279,280,5,21,0,0,280,281,
		3,28,14,0,281,282,5,22,0,0,282,57,1,0,0,0,283,284,5,18,0,0,284,285,5,35,
		0,0,285,286,5,46,0,0,286,287,5,36,0,0,287,288,5,22,0,0,288,59,1,0,0,0,
		289,290,5,19,0,0,290,291,5,35,0,0,291,292,5,46,0,0,292,293,5,39,0,0,293,
		294,3,28,14,0,294,295,5,36,0,0,295,296,5,22,0,0,296,61,1,0,0,0,24,65,67,
		78,89,95,112,117,124,132,140,148,156,164,186,192,195,199,217,223,238,253,
		260,269,275
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
